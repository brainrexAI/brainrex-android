/**
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package brainrexPackage;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class TickerResponseInner {
  
  @SerializedName("lastUpdated")
  private Date lastUpdated = null;
  @SerializedName("name")
  private String name = null;
  @SerializedName("percentChange24hUsd")
  private Float percentChange24hUsd = null;
  @SerializedName("priceBtc")
  private Float priceBtc = null;
  @SerializedName("priceUsd")
  private Float priceUsd = null;
  @SerializedName("symbol")
  private String symbol = null;

  /**
   * Closing price quote of the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Closing price quote of the time frame with two decimal points")
  public Date getLastUpdated() {
    return lastUpdated;
  }
  public void setLastUpdated(Date lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  /**
   * Highest price of the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Highest price of the time frame with two decimal points")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Percetange change in the last 24 hours
   **/
  @ApiModelProperty(value = "Percetange change in the last 24 hours")
  public Float getPercentChange24hUsd() {
    return percentChange24hUsd;
  }
  public void setPercentChange24hUsd(Float percentChange24hUsd) {
    this.percentChange24hUsd = percentChange24hUsd;
  }

  /**
   * Opening price quote of the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Opening price quote of the time frame with two decimal points")
  public Float getPriceBtc() {
    return priceBtc;
  }
  public void setPriceBtc(Float priceBtc) {
    this.priceBtc = priceBtc;
  }

  /**
   * Timestamp of the beggining of the frame
   **/
  @ApiModelProperty(value = "Timestamp of the beggining of the frame")
  public Float getPriceUsd() {
    return priceUsd;
  }
  public void setPriceUsd(Float priceUsd) {
    this.priceUsd = priceUsd;
  }

  /**
   * Volume of currency exchanged in the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Volume of currency exchanged in the time frame with two decimal points")
  public String getSymbol() {
    return symbol;
  }
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TickerResponseInner tickerResponseInner = (TickerResponseInner) o;
    return (this.lastUpdated == null ? tickerResponseInner.lastUpdated == null : this.lastUpdated.equals(tickerResponseInner.lastUpdated)) &&
        (this.name == null ? tickerResponseInner.name == null : this.name.equals(tickerResponseInner.name)) &&
        (this.percentChange24hUsd == null ? tickerResponseInner.percentChange24hUsd == null : this.percentChange24hUsd.equals(tickerResponseInner.percentChange24hUsd)) &&
        (this.priceBtc == null ? tickerResponseInner.priceBtc == null : this.priceBtc.equals(tickerResponseInner.priceBtc)) &&
        (this.priceUsd == null ? tickerResponseInner.priceUsd == null : this.priceUsd.equals(tickerResponseInner.priceUsd)) &&
        (this.symbol == null ? tickerResponseInner.symbol == null : this.symbol.equals(tickerResponseInner.symbol));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.lastUpdated == null ? 0: this.lastUpdated.hashCode());
    result = 31 * result + (this.name == null ? 0: this.name.hashCode());
    result = 31 * result + (this.percentChange24hUsd == null ? 0: this.percentChange24hUsd.hashCode());
    result = 31 * result + (this.priceBtc == null ? 0: this.priceBtc.hashCode());
    result = 31 * result + (this.priceUsd == null ? 0: this.priceUsd.hashCode());
    result = 31 * result + (this.symbol == null ? 0: this.symbol.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class TickerResponseInner {\n");
    
    sb.append("  lastUpdated: ").append(lastUpdated).append("\n");
    sb.append("  name: ").append(name).append("\n");
    sb.append("  percentChange24hUsd: ").append(percentChange24hUsd).append("\n");
    sb.append("  priceBtc: ").append(priceBtc).append("\n");
    sb.append("  priceUsd: ").append(priceUsd).append("\n");
    sb.append("  symbol: ").append(symbol).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
