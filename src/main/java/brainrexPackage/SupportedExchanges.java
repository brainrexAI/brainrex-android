/**
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package brainrexPackage;

import java.math.BigDecimal;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class SupportedExchanges {
  
  @SerializedName("bestCaseFee")
  private BigDecimal bestCaseFee = null;
  @SerializedName("worstCaseFee")
  private BigDecimal worstCaseFee = null;
  @SerializedName("exchange")
  private String exchange = null;

  /**
   * Best fee scenario offered by the market
   **/
  @ApiModelProperty(value = "Best fee scenario offered by the market")
  public BigDecimal getBestCaseFee() {
    return bestCaseFee;
  }
  public void setBestCaseFee(BigDecimal bestCaseFee) {
    this.bestCaseFee = bestCaseFee;
  }

  /**
   * Limit depth to extract from the orderbook
   **/
  @ApiModelProperty(value = "Limit depth to extract from the orderbook")
  public BigDecimal getWorstCaseFee() {
    return worstCaseFee;
  }
  public void setWorstCaseFee(BigDecimal worstCaseFee) {
    this.worstCaseFee = worstCaseFee;
  }

  /**
   * Name of the data format availables (standard)
   **/
  @ApiModelProperty(value = "Name of the data format availables (standard)")
  public String getExchange() {
    return exchange;
  }
  public void setExchange(String exchange) {
    this.exchange = exchange;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SupportedExchanges supportedExchanges = (SupportedExchanges) o;
    return (this.bestCaseFee == null ? supportedExchanges.bestCaseFee == null : this.bestCaseFee.equals(supportedExchanges.bestCaseFee)) &&
        (this.worstCaseFee == null ? supportedExchanges.worstCaseFee == null : this.worstCaseFee.equals(supportedExchanges.worstCaseFee)) &&
        (this.exchange == null ? supportedExchanges.exchange == null : this.exchange.equals(supportedExchanges.exchange));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.bestCaseFee == null ? 0: this.bestCaseFee.hashCode());
    result = 31 * result + (this.worstCaseFee == null ? 0: this.worstCaseFee.hashCode());
    result = 31 * result + (this.exchange == null ? 0: this.exchange.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SupportedExchanges {\n");
    
    sb.append("  bestCaseFee: ").append(bestCaseFee).append("\n");
    sb.append("  worstCaseFee: ").append(worstCaseFee).append("\n");
    sb.append("  exchange: ").append(exchange).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
