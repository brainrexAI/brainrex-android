/**
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package brainrexPackage;

import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class OHCLV {
  
  @SerializedName("close")
  private Float close = null;
  @SerializedName("high")
  private Float high = null;
  @SerializedName("end_date")
  private Date endDate = null;
  @SerializedName("open")
  private Float open = null;
  @SerializedName("time")
  private Date time = null;
  @SerializedName("volume")
  private Float volume = null;
  @SerializedName("usdVolume")
  private Float usdVolume = null;
  @SerializedName("btcVolume")
  private Float btcVolume = null;
  @SerializedName("quoteVolume")
  private Float quoteVolume = null;

  /**
   * Closing price quote of the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Closing price quote of the time frame with two decimal points")
  public Float getClose() {
    return close;
  }
  public void setClose(Float close) {
    this.close = close;
  }

  /**
   * Highest price of the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Highest price of the time frame with two decimal points")
  public Float getHigh() {
    return high;
  }
  public void setHigh(Float high) {
    this.high = high;
  }

  /**
   * End date in YYYY/MM/DD
   **/
  @ApiModelProperty(value = "End date in YYYY/MM/DD")
  public Date getEndDate() {
    return endDate;
  }
  public void setEndDate(Date endDate) {
    this.endDate = endDate;
  }

  /**
   * Opening price quote of the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Opening price quote of the time frame with two decimal points")
  public Float getOpen() {
    return open;
  }
  public void setOpen(Float open) {
    this.open = open;
  }

  /**
   * Timestamp of the beggining of the frame
   **/
  @ApiModelProperty(value = "Timestamp of the beggining of the frame")
  public Date getTime() {
    return time;
  }
  public void setTime(Date time) {
    this.time = time;
  }

  /**
   * Volume of currency exchanged in the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Volume of currency exchanged in the time frame with two decimal points")
  public Float getVolume() {
    return volume;
  }
  public void setVolume(Float volume) {
    this.volume = volume;
  }

  /**
   * Volume of currency exchanged in dollars the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Volume of currency exchanged in dollars the time frame with two decimal points")
  public Float getUsdVolume() {
    return usdVolume;
  }
  public void setUsdVolume(Float usdVolume) {
    this.usdVolume = usdVolume;
  }

  /**
   * Volume of currency exchanged in dollars the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Volume of currency exchanged in dollars the time frame with two decimal points")
  public Float getBtcVolume() {
    return btcVolume;
  }
  public void setBtcVolume(Float btcVolume) {
    this.btcVolume = btcVolume;
  }

  /**
   * Volume of currency exchanged in dollars the time frame with two decimal points
   **/
  @ApiModelProperty(value = "Volume of currency exchanged in dollars the time frame with two decimal points")
  public Float getQuoteVolume() {
    return quoteVolume;
  }
  public void setQuoteVolume(Float quoteVolume) {
    this.quoteVolume = quoteVolume;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OHCLV OHCLV = (OHCLV) o;
    return (this.close == null ? OHCLV.close == null : this.close.equals(OHCLV.close)) &&
        (this.high == null ? OHCLV.high == null : this.high.equals(OHCLV.high)) &&
        (this.endDate == null ? OHCLV.endDate == null : this.endDate.equals(OHCLV.endDate)) &&
        (this.open == null ? OHCLV.open == null : this.open.equals(OHCLV.open)) &&
        (this.time == null ? OHCLV.time == null : this.time.equals(OHCLV.time)) &&
        (this.volume == null ? OHCLV.volume == null : this.volume.equals(OHCLV.volume)) &&
        (this.usdVolume == null ? OHCLV.usdVolume == null : this.usdVolume.equals(OHCLV.usdVolume)) &&
        (this.btcVolume == null ? OHCLV.btcVolume == null : this.btcVolume.equals(OHCLV.btcVolume)) &&
        (this.quoteVolume == null ? OHCLV.quoteVolume == null : this.quoteVolume.equals(OHCLV.quoteVolume));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.close == null ? 0: this.close.hashCode());
    result = 31 * result + (this.high == null ? 0: this.high.hashCode());
    result = 31 * result + (this.endDate == null ? 0: this.endDate.hashCode());
    result = 31 * result + (this.open == null ? 0: this.open.hashCode());
    result = 31 * result + (this.time == null ? 0: this.time.hashCode());
    result = 31 * result + (this.volume == null ? 0: this.volume.hashCode());
    result = 31 * result + (this.usdVolume == null ? 0: this.usdVolume.hashCode());
    result = 31 * result + (this.btcVolume == null ? 0: this.btcVolume.hashCode());
    result = 31 * result + (this.quoteVolume == null ? 0: this.quoteVolume.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class OHCLV {\n");
    
    sb.append("  close: ").append(close).append("\n");
    sb.append("  high: ").append(high).append("\n");
    sb.append("  endDate: ").append(endDate).append("\n");
    sb.append("  open: ").append(open).append("\n");
    sb.append("  time: ").append(time).append("\n");
    sb.append("  volume: ").append(volume).append("\n");
    sb.append("  usdVolume: ").append(usdVolume).append("\n");
    sb.append("  btcVolume: ").append(btcVolume).append("\n");
    sb.append("  quoteVolume: ").append(quoteVolume).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
